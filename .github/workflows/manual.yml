# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:

env:
  WXWIDGETS_VER: 3.2.6

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          cmake build-essential libssl-dev gettext git pkg-config lsb-release \
          libgtk-3-dev libcurl4-openssl-dev libwebkit2gtk-4.1-dev wget 

      - name: Restore wxWidgets from Cache
        id: restore-cache-wxWidgets
        uses: actions/cache/restore@v4
        with:
          path: ~/wxWidgets-${{env.WXWIDGETS_VER}}
          key: ${{runner.os}}-wxWidgets-${{env.WXWIDGETS_VER}}

      - name: Build wxWidgets
        if: steps.restore-cache-wxWidgets.outputs.cache-hit != 'true'
        run: |
          cd ~
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{env.WXWIDGETS_VER}}/wxWidgets-${{env.WXWIDGETS_VER}}.tar.bz2
          tar -xjf wxWidgets-${{env.WXWIDGETS_VER}}.tar.bz2
          cd wxWidgets-${{env.WXWIDGETS_VER}}
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DwxBUILD_SHARED=OFF -DwxUSE_STL=ON
          cmake --build build

      - name: Install wxWidgets
        run: |
          cd ~/wxWidgets-${{env.WXWIDGETS_VER}}
          sudo cmake --build build --target install

      - name: Save wxWidgets to Cache
        if: steps.restore-cache-wxWidgets.outputs.cache-hit != 'true'
        id: save-cache-wxWidgets
        uses: actions/cache/save@v4
        with:
          path: ~/wxWidgets-${{env.WXWIDGETS_VER}}
          key: ${{runner.os}}-wxWidgets-${{env.WXWIDGETS_VER}}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build oxcalfrp
        id: oxcalfrp-build
        run: |
          cd $GITHUB_WORKSPACE
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target package
          cd build
          cmake --install . --prefix AppDir
          touch $(pwd)/AppDir/oxcalfrp.desktop
          echo -e "[Desktop Entry]\nType=Application\nName=oxcalfrp\nGenericName=Orthodox Calendar frp\nExec=oxcalfrp\nIcon=oxcalfrp\nTerminal=false\nCategories=Science\n" > $(pwd)/AppDir/oxcalfrp.desktop
          cp $(pwd)/../resources/ICXC_NIKA.png $(pwd)/AppDir/oxcalfrp.png
          curl -LO https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          curl -LO https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh
          curl -LO https://github.com/darealshinji/linuxdeploy-plugin-checkrt/releases/download/continuous/linuxdeploy-plugin-checkrt.sh
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-gtk.sh linuxdeploy-plugin-checkrt.sh
          export DEPLOY_GTK_VERSION=3
          ./linuxdeploy-x86_64.AppImage --appdir $(pwd)/AppDir --plugin gtk --plugin checkrt --executable $(pwd)/AppDir/bin/oxcalfrp --output appimage
          mv $(pwd)/oxc*.AppImage $(echo $(pwd)/oxc*.deb | sed 's/deb/AppImage/')
          echo "deb_artifact_name=$(ls oxc*.deb)" >> $GITHUB_OUTPUT
          echo "appimage_artifact_name=$(ls oxc*.AppImage)" >> $GITHUB_OUTPUT

      - name: Upload DEB Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.oxcalfrp-build.outputs.deb_artifact_name }}
          path: build/oxc*.deb

      - name: Upload AppImage Pachage
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.oxcalfrp-build.outputs.appimage_artifact_name }}
          path: build/oxc*.AppImage
